// goe_service.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goe_service.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "ernie.org/goe/proto"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GOEServiceName is the fully-qualified name of the GOEService service.
	GOEServiceName = "GOEService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GOEServiceGetStatsProcedure is the fully-qualified name of the GOEService's GetStats RPC.
	GOEServiceGetStatsProcedure = "/GOEService/GetStats"
	// GOEServiceGetPolylinesProcedure is the fully-qualified name of the GOEService's GetPolylines RPC.
	GOEServiceGetPolylinesProcedure = "/GOEService/GetPolylines"
	// GOEServiceGetPointsProcedure is the fully-qualified name of the GOEService's GetPoints RPC.
	GOEServiceGetPointsProcedure = "/GOEService/GetPoints"
	// GOEServiceSavePositionProcedure is the fully-qualified name of the GOEService's SavePosition RPC.
	GOEServiceSavePositionProcedure = "/GOEService/SavePosition"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gOEServiceServiceDescriptor            = proto.File_goe_service_proto.Services().ByName("GOEService")
	gOEServiceGetStatsMethodDescriptor     = gOEServiceServiceDescriptor.Methods().ByName("GetStats")
	gOEServiceGetPolylinesMethodDescriptor = gOEServiceServiceDescriptor.Methods().ByName("GetPolylines")
	gOEServiceGetPointsMethodDescriptor    = gOEServiceServiceDescriptor.Methods().ByName("GetPoints")
	gOEServiceSavePositionMethodDescriptor = gOEServiceServiceDescriptor.Methods().ByName("SavePosition")
)

// GOEServiceClient is a client for the GOEService service.
type GOEServiceClient interface {
	GetStats(context.Context, *connect.Request[proto.GetStatsRequest]) (*connect.Response[proto.GetStatsResponse], error)
	GetPolylines(context.Context, *connect.Request[proto.GetPolylinesRequest]) (*connect.ServerStreamForClient[proto.GetPolylinesResponse], error)
	GetPoints(context.Context, *connect.Request[proto.GetPointsRequest]) (*connect.ServerStreamForClient[proto.GetPointsResponse], error)
	SavePosition(context.Context, *connect.Request[proto.SavePositionRequest]) (*connect.Response[proto.SavePositionResponse], error)
}

// NewGOEServiceClient constructs a client for the GOEService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGOEServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GOEServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gOEServiceClient{
		getStats: connect.NewClient[proto.GetStatsRequest, proto.GetStatsResponse](
			httpClient,
			baseURL+GOEServiceGetStatsProcedure,
			connect.WithSchema(gOEServiceGetStatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPolylines: connect.NewClient[proto.GetPolylinesRequest, proto.GetPolylinesResponse](
			httpClient,
			baseURL+GOEServiceGetPolylinesProcedure,
			connect.WithSchema(gOEServiceGetPolylinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPoints: connect.NewClient[proto.GetPointsRequest, proto.GetPointsResponse](
			httpClient,
			baseURL+GOEServiceGetPointsProcedure,
			connect.WithSchema(gOEServiceGetPointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		savePosition: connect.NewClient[proto.SavePositionRequest, proto.SavePositionResponse](
			httpClient,
			baseURL+GOEServiceSavePositionProcedure,
			connect.WithSchema(gOEServiceSavePositionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gOEServiceClient implements GOEServiceClient.
type gOEServiceClient struct {
	getStats     *connect.Client[proto.GetStatsRequest, proto.GetStatsResponse]
	getPolylines *connect.Client[proto.GetPolylinesRequest, proto.GetPolylinesResponse]
	getPoints    *connect.Client[proto.GetPointsRequest, proto.GetPointsResponse]
	savePosition *connect.Client[proto.SavePositionRequest, proto.SavePositionResponse]
}

// GetStats calls GOEService.GetStats.
func (c *gOEServiceClient) GetStats(ctx context.Context, req *connect.Request[proto.GetStatsRequest]) (*connect.Response[proto.GetStatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// GetPolylines calls GOEService.GetPolylines.
func (c *gOEServiceClient) GetPolylines(ctx context.Context, req *connect.Request[proto.GetPolylinesRequest]) (*connect.ServerStreamForClient[proto.GetPolylinesResponse], error) {
	return c.getPolylines.CallServerStream(ctx, req)
}

// GetPoints calls GOEService.GetPoints.
func (c *gOEServiceClient) GetPoints(ctx context.Context, req *connect.Request[proto.GetPointsRequest]) (*connect.ServerStreamForClient[proto.GetPointsResponse], error) {
	return c.getPoints.CallServerStream(ctx, req)
}

// SavePosition calls GOEService.SavePosition.
func (c *gOEServiceClient) SavePosition(ctx context.Context, req *connect.Request[proto.SavePositionRequest]) (*connect.Response[proto.SavePositionResponse], error) {
	return c.savePosition.CallUnary(ctx, req)
}

// GOEServiceHandler is an implementation of the GOEService service.
type GOEServiceHandler interface {
	GetStats(context.Context, *connect.Request[proto.GetStatsRequest]) (*connect.Response[proto.GetStatsResponse], error)
	GetPolylines(context.Context, *connect.Request[proto.GetPolylinesRequest], *connect.ServerStream[proto.GetPolylinesResponse]) error
	GetPoints(context.Context, *connect.Request[proto.GetPointsRequest], *connect.ServerStream[proto.GetPointsResponse]) error
	SavePosition(context.Context, *connect.Request[proto.SavePositionRequest]) (*connect.Response[proto.SavePositionResponse], error)
}

// NewGOEServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGOEServiceHandler(svc GOEServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gOEServiceGetStatsHandler := connect.NewUnaryHandler(
		GOEServiceGetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(gOEServiceGetStatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gOEServiceGetPolylinesHandler := connect.NewServerStreamHandler(
		GOEServiceGetPolylinesProcedure,
		svc.GetPolylines,
		connect.WithSchema(gOEServiceGetPolylinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gOEServiceGetPointsHandler := connect.NewServerStreamHandler(
		GOEServiceGetPointsProcedure,
		svc.GetPoints,
		connect.WithSchema(gOEServiceGetPointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gOEServiceSavePositionHandler := connect.NewUnaryHandler(
		GOEServiceSavePositionProcedure,
		svc.SavePosition,
		connect.WithSchema(gOEServiceSavePositionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/GOEService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GOEServiceGetStatsProcedure:
			gOEServiceGetStatsHandler.ServeHTTP(w, r)
		case GOEServiceGetPolylinesProcedure:
			gOEServiceGetPolylinesHandler.ServeHTTP(w, r)
		case GOEServiceGetPointsProcedure:
			gOEServiceGetPointsHandler.ServeHTTP(w, r)
		case GOEServiceSavePositionProcedure:
			gOEServiceSavePositionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGOEServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGOEServiceHandler struct{}

func (UnimplementedGOEServiceHandler) GetStats(context.Context, *connect.Request[proto.GetStatsRequest]) (*connect.Response[proto.GetStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("GOEService.GetStats is not implemented"))
}

func (UnimplementedGOEServiceHandler) GetPolylines(context.Context, *connect.Request[proto.GetPolylinesRequest], *connect.ServerStream[proto.GetPolylinesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("GOEService.GetPolylines is not implemented"))
}

func (UnimplementedGOEServiceHandler) GetPoints(context.Context, *connect.Request[proto.GetPointsRequest], *connect.ServerStream[proto.GetPointsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("GOEService.GetPoints is not implemented"))
}

func (UnimplementedGOEServiceHandler) SavePosition(context.Context, *connect.Request[proto.SavePositionRequest]) (*connect.Response[proto.SavePositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("GOEService.SavePosition is not implemented"))
}
