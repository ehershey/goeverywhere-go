// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stats.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "ernie.org/goe/proto"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GOEName is the fully-qualified name of the GOE service.
	GOEName = "GOE"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GOEGetStatsProcedure is the fully-qualified name of the GOE's GetStats RPC.
	GOEGetStatsProcedure = "/GOE/GetStats"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gOEServiceDescriptor        = proto.File_stats_proto.Services().ByName("GOE")
	gOEGetStatsMethodDescriptor = gOEServiceDescriptor.Methods().ByName("GetStats")
)

// GOEClient is a client for the GOE service.
type GOEClient interface {
	GetStats(context.Context, *connect.Request[proto.StatsRequest]) (*connect.Response[proto.StatsResponse], error)
}

// NewGOEClient constructs a client for the GOE service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGOEClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GOEClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gOEClient{
		getStats: connect.NewClient[proto.StatsRequest, proto.StatsResponse](
			httpClient,
			baseURL+GOEGetStatsProcedure,
			connect.WithSchema(gOEGetStatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gOEClient implements GOEClient.
type gOEClient struct {
	getStats *connect.Client[proto.StatsRequest, proto.StatsResponse]
}

// GetStats calls GOE.GetStats.
func (c *gOEClient) GetStats(ctx context.Context, req *connect.Request[proto.StatsRequest]) (*connect.Response[proto.StatsResponse], error) {
	return c.getStats.CallUnary(ctx, req)
}

// GOEHandler is an implementation of the GOE service.
type GOEHandler interface {
	GetStats(context.Context, *connect.Request[proto.StatsRequest]) (*connect.Response[proto.StatsResponse], error)
}

// NewGOEHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGOEHandler(svc GOEHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gOEGetStatsHandler := connect.NewUnaryHandler(
		GOEGetStatsProcedure,
		svc.GetStats,
		connect.WithSchema(gOEGetStatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/GOE/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GOEGetStatsProcedure:
			gOEGetStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGOEHandler returns CodeUnimplemented from all methods.
type UnimplementedGOEHandler struct{}

func (UnimplementedGOEHandler) GetStats(context.Context, *connect.Request[proto.StatsRequest]) (*connect.Response[proto.StatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("GOE.GetStats is not implemented"))
}
